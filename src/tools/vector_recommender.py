from typing import Dict, Any
import streamlit as st
from langchain_neo4j import Neo4jVector
from langchain_core.prompts import ChatPromptTemplate
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain
from langchain.tools import tool

from src.chat.llm import llm, embeddings
from src.database.graph import graph
from src.prompts.llm_prompts import VECTOR_RECOMMENDATION_PROMPT


class MovieRecommenderVectorSimilarity:
    """A class for recommending movies based on descriptions using Neo4j and LangChain."""

    def __init__(self):
        """Initialize the movie recommender system."""
        self._initialize_neo4j_vector()
        self._setup_retriever()
        self._setup_prompt()
        self._setup_chain()

    def _initialize_neo4j_vector(self) -> None:
        """Initialize the Neo4jVector for movie embeddings."""
        self.neo4jvector = Neo4jVector.from_existing_index(
            embeddings,
            graph=graph,
            index_name="MovieVector",
            node_label="Movie",
            text_node_property="description",
            embedding_node_property="descriptionEmbedding",
            retrieval_query="""
                RETURN
                    node.description AS text,
                    score,
                    {
                        title: node.title,
                        type: [(node)-[:IS_TYPE]->(MovieType) | MovieType.movieType],
                        directors: [ (Director)-[:DIRECTED_BY]->(node) | Director.directorName ],
                        actors: [ (Actor)-[r:ACTED_IN]->(node) | Actor.actorName ],
                        genres: [ (node)-[:IN_GENRE]->(genre) | genre.genre]
                    } AS metadata
            """,
        )

    def _setup_retriever(self) -> None:
        """Set up the retriever for fetching movie data."""
        self.retriever = self.neo4jvector.as_retriever()

    def _setup_prompt(self) -> None:
        """Set up the prompt template for recommendations."""
        self.prompt = ChatPromptTemplate.from_messages(
            [
                ("system", VECTOR_RECOMMENDATION_PROMPT),
                ("human", "{input}"),
            ]
        )

    def _setup_chain(self) -> None:
        """Set up the chain for recommendations."""
        self.qa_chain = create_stuff_documents_chain(llm, self.prompt)
        self.description_retriever = create_retrieval_chain(
            self.retriever, self.qa_chain
        )

    def recommend_similar_movies(self, input: str) -> Dict[str, Any]:
        """Recommend similar movies based on the input description.

        Args:
            input: The input description to find similar movies for.

        Returns:
            A dictionary containing the recommendation results.
        """
        
        return self.description_retriever.invoke({"input": input})


@tool("recommend_similar_movies", return_direct=True)
def recommend_similar_movies(user_input: str) -> str:
    """Tool to generate movie recommendations based on vector similarity
    based on movie description.

    Returns:
        str: A string containing the recommendations generated by the LLM
    """
    recommender = MovieRecommenderVectorSimilarity()
    return recommender.recommend_similar_movies(user_input)
